}
}
# return result:
return(rsme(log(df_actual),data.frame(R_C))) #data.frame(R_C)
}
r1=replicate(400,funtion_for_simulation_addative_1(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
r1=replicate(400,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
library(Metrics)
funtion_for_simulation_addative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C <-j-i-k ##subtracting seasanality and randomness from serize to get more accurate
}
}
}
# return result:
return(rsme(log(df_actual),data.frame(R_C))) #data.frame(R_C)
}
r1=replicate(400,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
funtion_for_simulation_addative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C <-j-i-k ##subtracting seasanality and randomness from serize to get more accurate
}
}
}
# return result:
return(rmse(log(df_actual),data.frame(R_C))) #data.frame(R_C)
}
r1=replicate(400,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
funtion_for_simulation_addative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C <-j-i-k ##subtracting seasanality and randomness from serize to get more accurate
}
}
}
# return result:
return(rmse(log(df_actual),R_C)) #data.frame(R_C)
}
r1=replicate(400,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
r1
df <-data.frame( do.call(cbind, r1))
df <-data.frame( do.call(cbind, list(r1)))
df_addative <-data.frame( do.call(cbind, list(r1)))
combine_add <- cbind(Df_st_test,df_addative)
ts.plot(combine_add,col=c("blue","red"),main="actual vs forcast")
View(df_addative)
View(df_addative)
hist(df_addative)
hist(r1)
View(df_addative)
hist(df_addative[1,])
hist(df_addative[,1])
hist(df_addative[,1],xlim=c(0,400))
hist(df_addative[,1],xlim=c(0,40))
plot(df_addative[,0],df_addative[,1], type = "S")
plot(df_addative[,1], type = "S")
plot(df_addative[,1], type = "b")
plot(df_addative[,1], type = "s")
plot(df_addative[,1], type = "s",col = "red", xlab = "five quarters", ylab = "RMSE")
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
r1=replicate(12,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
df_addative <-data.frame( do.call(cbind, list(r1)))
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
ts.plot(combine_add,col=c("blue","red"),main="actual vs forcast")
funtion_for_simulation_multivative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C_m <-j*1/(i*k)
}
}
}
# return result:
return(rsme(df_actual,R_C_m))
}
funtion_for_simulation_multivative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C_m <-j*1/(i*k)
}
}
}
# return result:
return(rmse(df_actual,R_C_m))
}
r2=replicate(30000,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,multiplicative,Df_st_test))
random_seasonal_multiplicative <- runif(17, min=min(Comp$seasonal), max=max(Comp$seasonal))
random_error_multiplicative <- runif(17, min=min(Comp$figure), max=max(Comp$figure))
funtion_for_simulation_multivative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C_m <-j*1/(i*k)
}
}
}
# return result:
return(rmse(df_actual,R_C_m))
}
r2=replicate(30000,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,multiplicative,Df_st_test))
r2=replicate(30000,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,multiplicative,Df_st_test))
Comp <- decompose(Df_st,type="multiplicative")
r2=replicate(30000,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,multiplicative,Df_st_test))
r2=replicate(30000,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,df_open_multiplicative,Df_st_test))
df_multivative <-data.frame( do.call(cbind, list(r2)))
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
r2=replicate(12,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,df_open_multiplicative,Df_st_test))
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
df_multivative <-data.frame( do.call(cbind, list(r2)))
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
r2=replicate(12,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,df_open_multiplicative,Df_st_test))
df_multivative <-data.frame( do.call(cbind, list(r2)))
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
plot(df_addative[,1], type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
lines(df_multivative[,1], pch = 18, col = "blue", type = "b", lty = 2)
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(df_addative[,1], type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
lines(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(df_addative[,1], type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
lines(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
lines(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
lines(df_multivative[,1], col = "blue", type = "s")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
lines(df_multivative[,1], col = "blue", type = "s")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main = "year vs RMSE in multivative scale ")
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
data <- read.csv('IIM.csv')
df_stock <- data[ -c(7:3) ]
Df_st<- ts(df_stock[,2], frequency=12, start=c(2016,1),end=c(2021,5))
Comp <- decompose(Df_st,type="multiplicative")
Comp1 <- decompose(log(Df_st),type="additive")
Df_st_train<- ts(df_stock[,2], frequency=12, start=c(2016,1),end=c(2019,12))
Df_st_test<- ts(df_stock[,2], frequency=12, start=c(2020,1),end=c(2021,5))
hw1<-hw(Df_st_train,h=24,seasonal = "multiplicative")
hw_log<-hw(log(Df_st_train),h=24,seasonal = "additive")
forecast_additive =as.data.frame(forecast(hw_log,methods='rwdrift'))
forecast_multiplicative= as.data.frame(forecast(hw1,methods='rwdrift'))
newdata_additive <- forecast_additive[1:17,]
newdata_multiplicative<- forecast_multiplicative[1:17,]
var_in_additive <- cbind(log(Df_st_test),newdata_additive[,1])
ts.plot(var_in_additive,col=c("blue","red"),main="actual vs forcast")
var_in_multiplicative <- cbind(Df_st_test,newdata_multiplicative[,1])
ts.plot(var_in_multiplicative,col=c("blue","red"),main="actual vs forcast")
df_open_additive <- newdata_additive[ c(1) ]
df_open_multiplicative<- newdata_multiplicative[ c(1) ]
funtion_for_simulation_addative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C <-j-i-k ##subtracting seasanality and randomness from serize to get more accurate
}
}
}
# return result:
return(rmse(log(df_actual),R_C)) #data.frame(R_C)
}
year = 12
r1=replicate(year,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
df_addative <-data.frame( do.call(cbind, list(r1)))
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE")
funtion_for_simulation_multivative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C_m <-j*1/(i*k)
}
}
}
# return result:
return(rmse(df_actual,R_C_m))
}
r2=replicate(12,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,df_open_multiplicative,Df_st_test))
df_multivative <-data.frame( do.call(cbind, list(r2)))
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main = "year vs RMSE in multivative scale ")
#from the graph it is observed thaat the pattern will repate again aafter 2 year in 12 year simulation
#combine both
plot(df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
lines(df_multivative[,1], col = "blue", type = "s")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
#combine both
plot(df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
lines(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
plot(df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
hist(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
plot(df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
plot(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
plot(df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE")
# Add a second line
line(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
plot((df_addative[,1], type = "b",
col = "red", xlab = "year", ylab = "RMSE"), line(df_multivative[,1], col = "blue", type = "b"))
plot((df_addative[,1], type = "b"),
line(df_multivative[,1], col = "blue", type = "b"))
line(df_addative[,1], type = "b")
# Add a second line
line(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
line(df_addative[,1], type = "b")
# Add a second line
line(df_multivative[,1], col = "blue", type = "b")
# Add a legend to the plot
legend("topleft", legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
source('D:/stock price/stock price/its ok.R')
plot(df_addative[,1],type = "o",col = "red", xlab = "Month", ylab = "Rain fall",
main = "Rain fall chart")
lines(df_multivative[,1], type = "o", col = "blue")
View(hw1)
View(newdata_additive)
View(newdata_additive)
ts.plot(var_in_additive,col=c("blue","red"),main="actual vs forcast in additive type")
ts.plot(var_in_multiplicative,col=c("blue","red"),main="actual vs forcast in multiplicative type")
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main="year(12) vs RMSE in addative type")
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main="year(for 12) vs RMSE in addative type")
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main = "year(for 12) vs RMSE in multivative scale ")
for (j in df){
for(i in x){
for(k in y){
R_C <-j+i+k ##subtracting seasanality and randomness from serize to get more accurate
}
}
}
# return result:
return(rmse(log(df_actual),R_C)) #data.frame(R_C)
}
funtion_for_simulation_addative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C <-j+i+k ##subtracting seasanality and randomness from serize to get more accurate
}
}
}
# return result:
return(rmse(log(df_actual),R_C)) #data.frame(R_C)
}
year = 12
r1=replicate(year,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
df_addative <-data.frame( do.call(cbind, list(r1)))
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main="year(for 12) vs RMSE in addative type")
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main = "year(for 12) vs RMSE in multivative scale ")
funtion_for_simulation_multivative<-function(X,Y,df,df_actual){
x=runif(17, min=min(X), max=max(X))
y= runif(17, min=min(Y), max=max(Y))
# calculate randam change in price:
for (j in df){
for(i in x){
for(k in y){
R_C_m <-j*(i*k)
}
}
}
# return result:
return(rmse(df_actual,R_C_m))
}
r2=replicate(12,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,df_open_multiplicative,Df_st_test))
df_multivative <-data.frame( do.call(cbind, list(r2)))
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main = "year(for 12) vs RMSE in multivative scale ")
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main = "year(for 12) vs RMSE in multivative scale ")
p = ggplot() +
geom_line(data = df_addative[,1], aes(x = dates, y = Difference), color = "blue") +
geom_line(data = df_multivative[,1], aes(x = dates, y = Difference), color = "red") +
xlab('Dates') +
ylab('percent.change')
p = ggplot() +
geom_line(data = data.frame(df_addative[,1]), aes(x = dates, y = Difference), color = "blue") +
geom_line(data = data.frame(df_multivative[,1]), aes(x = dates, y = Difference), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
p = ggplot() +
geom_line(data = data.frame(df_addative[,1]), color = "blue") +
geom_line(data = data.frame(df_multivative[,1]), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
a=data.frame(df_addative[,1])
View(a)
p = ggplot() +
geom_line(data = data.frame(df_addative[,1]), aes(x = df_addative[,1], y = list(1:12)), color = "blue") +
geom_line(data = data.frame(df_multivative[,1]), aes(x = df_multivative[,1], y = list(1:12)), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
l1= list(1:12)
a=data.frame(l1,df_addative[,1])
names(a) <- c('year', 'RSME')
View(a)
b=data.frame(l1,df_multivative[,1])
names(b) <- c('year', 'RSME')
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
View(b)
View(a)
View(b)
library(caret)
install.packages("caret")
library(caret)
preproc1 <- preProcess(df_addative[,1], method=c("center", "scale"))
preproc1 <- preProcess(a[,c(2)], method=c("center", "scale"))
preproc1 <- preProcess(a, method=c("center", "scale"))
norm1 <- predict(preproc1, a)
View(norm1)
preproc1 <- preProcess(a[,2], method=c("center", "scale"))
preproc1 <- preProcess(data.frame(df_addative[,1]), method=c("center", "scale"))
norm1 <- predict(preproc1,data.frame(df_addative[,1]))
View(norm1)
preproc_mul <- preProcess(data.frame(df_multivative[,1]), method=c("center", "scale"))
norm1_mul <- predict(preproc1,data.frame(df_multivative[,1]))
norm1_add <- predict(preproc_add,data.frame(df_addative[,1]))
preproc_add <- preProcess(data.frame(df_addative[,1]), method=c("center", "scale"))
preproc_mul <- preProcess(data.frame(df_multivative[,1]), method=c("center", "scale"))
norm1_add <- predict(preproc_add,data.frame(df_addative[,1]))
norm1_mul <- predict(preproc_mul,data.frame(df_multivative[,1]))
p9 <- ggplot(data.frame(norm1_add) +
stat_function(fun = dnorm))
p = ggplot() +
geom_line(data = data.frame(norm1_add), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(norm1_mul), aes(x = year, y = RSME), color = "red") +
xlab('Dates') +
ylab('percent.change')
p
l1= list(1:12)
a=data.frame(l1,norm1_add[,1])
names(a) <- c('year', 'RSME')
b=data.frame(l1,norm1_mul[,1])
names(b) <- c('year', 'RSME')
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('Dates') +
ylab('percent.change')
p
year = 30
r1=replicate(year,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
df_addative <-data.frame( do.call(cbind, list(r1)))
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main="year(for 12) vs RMSE in addative type")
r2=replicate(year,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,df_open_multiplicative,Df_st_test))
df_multivative <-data.frame( do.call(cbind, list(r2)))
plot(df_multivative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main = "year(for 12) vs RMSE in multivative scale ")
preproc_add <- preProcess(data.frame(df_addative[,1]), method=c("center", "scale"))
preproc_mul <- preProcess(data.frame(df_multivative[,1]), method=c("center", "scale"))
norm1_add <- predict(preproc_add,data.frame(df_addative[,1]))
norm1_mul <- predict(preproc_mul,data.frame(df_multivative[,1]))
l1= list(1:12)
a=data.frame(l1,norm1_add[,1])
names(a) <- c('year', 'RSME')
b=data.frame(l1,norm1_mul[,1])
names(b) <- c('year', 'RSME')
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('Dates') +
ylab('percent.change')
p
l1= list(1:30)
a=data.frame(l1,norm1_add[,1])
names(a) <- c('year', 'RSME')
b=data.frame(l1,norm1_mul[,1])
names(b) <- c('year', 'RSME')
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('Dates') +
ylab('percent.change')
p
l1= list(1:year)
year = 12
r1=replicate(year,funtion_for_simulation_addative(Comp1$seasonal,Comp1$figure,df_open_additive,Df_st_test))
df_addative <-data.frame( do.call(cbind, list(r1)))
plot(df_addative[,1], type = "s",col = "red", xlab = "year", ylab = "RMSE",main="year(for 12) vs RMSE in addative type")
r2=replicate(year,funtion_for_simulation_multivative(Comp$seasonal,Comp$figure,df_open_multiplicative,Df_st_test))
df_multivative <-data.frame( do.call(cbind, list(r2)))
preproc_add <- preProcess(data.frame(df_addative[,1]), method=c("center", "scale"))
preproc_mul <- preProcess(data.frame(df_multivative[,1]), method=c("center", "scale"))
norm1_add <- predict(preproc_add,data.frame(df_addative[,1]))
norm1_mul <- predict(preproc_mul,data.frame(df_multivative[,1]))
l1= list(1:year)
a=data.frame(l1,norm1_add[,1])
names(a) <- c('year', 'RSME')
b=data.frame(l1,norm1_mul[,1])
names(b) <- c('year', 'RSME')
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('Dates') +
ylab('percent.change')
print(p)
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('year') +
ylab('RSME')
print(p)
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('year') +
ylab('RSME')+
legend = c("Group 1", "Group 2")
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('year') +
ylab('RSME')
legend = c("Group 1", "Group 2")
print(p)
p = ggplot() +
geom_line(data = data.frame(a), aes(x =year, y = RSME), color = "blue") +
geom_line(data = data.frame(b), aes(x = year, y = RSME), color = "red") +
xlab('year') +
ylab('RSME')+
legend = c("Group 1", "Group 2")
source('D:/stock price/stock price/its ok.R')
